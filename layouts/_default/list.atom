{{ printf `<?xml version="1.0" encoding="utf-8"?>` | safeHTML }} {{/* ref: https://validator.w3.org/feed/docs/atom.html */}}
<feed
    xmlns="http://www.w3.org/2005/Atom"
    {{ with site.LanguageCode }} xml:lang="{{ . }}"{{ end }}>
    <generator uri="https://gohugo.io/" version="{{ hugo.Version }}">Hugo</generator>
    {{- $title := site.Title -}}
    {{- with .Title -}}
        {{- if (not (eq . site.Title)) -}}
            {{- $title = printf `%s %s %s` . (i18n "feed_title_on" | default "on") site.Title -}}
        {{- end -}}
    {{- end -}}
    {{- if .IsTranslated -}}
        {{ $title = printf "%s (%s)" $title (.Language.LanguageName | default (.Lang | upper)) }}
    {{- end -}}
    {{ printf `<title type="html"><![CDATA[%s]]></title>` $title | safeHTML }}
    {{ with (or (.Param "description") (.Param "subtitle") (.Param "tagline")) }}
        {{ printf `<subtitle type="html"><![CDATA[%s]]></subtitle>` . | safeHTML }}
    {{ end }}
    {{ with .OutputFormats.Get "HTML" }}
        {{ printf `<link href=%q rel=%q type=%q title=%q />` .Permalink "alternate" .MediaType.Type .Name | safeHTML }}
    {{- end -}}
    {{ with .OutputFormats.Get "Atom" }}
        {{ printf `<link href=%q rel=%q type=%q title=%q />` .Permalink "alternate" .MediaType.Type .Name | safeHTML }}
    {{- end -}}
    {{ with .OutputFormats.Get "JSONFeed" }}
        {{ printf `<link href=%q rel=%q type=%q title=%q />` .Permalink "alternate" .MediaType.Type .Name | safeHTML }}
    {{- end -}}
    {{ with .OutputFormats.Get "RSS" }}
        {{ printf `<link href=%q rel=%q type=%q title=%q />` .Permalink "self" .MediaType.Type .Name | safeHTML }}
    {{- end -}}
    {{- range .Translations }}
        {{- $lang := .Lang }}
        {{- $langstr := index site.Data.i18n.languages .Lang }}
        {{ with .OutputFormats.Get "HTML" }}
            {{ printf `<link href=%q rel=%q type=%q hreflang=%q title="[%s] %s" />` .Permalink "alternate" .MediaType.Type $lang $langstr .Name | safeHTML }}
        {{- end -}}
        {{ with .OutputFormats.Get "Atom" }}
            {{ printf `<link href=%q rel=%q type=%q hreflang=%q title="[%s] %s" />` .Permalink "alternate" .MediaType.Type $lang $langstr .Name | safeHTML }}
        {{- end -}}
        {{ with .OutputFormats.Get "JSONFeed" }}
            {{ printf `<link href=%q rel=%q type=%q hreflang=%q title="[%s] %s" />` .Permalink "alternate" .MediaType.Type $lang $langstr .Name | safeHTML }}
        {{- end -}}
        {{ with .OutputFormats.Get "RSS" }}
            {{ printf `<link href=%q rel=%q type=%q hreflang=%q title="[%s] %s" />` .Permalink "self" .MediaType.Type $lang $langstr .Name | safeHTML }}
        {{- end -}}
    {{- end }}
    <updated>{{ now.Format "2006-01-02T15:04:05-07:00" | safeHTML }}</updated>
    {{ with site.Copyright }}
        {{- $copyright := replace . "{year}" now.Year -}} {{/* In case the site.copyright uses a special string "{year}" */}}
        {{- $copyright = replace $copyright "&copy;" "Â©" -}}
        <rights>{{ $copyright | plainify }}</rights>
    {{- end }}
    {{- $image_name := "*featured*" -}}
    {{- $banner_image_name := "*banner*" -}}
    {{- $avatar_image_name := "*avatar*" -}}
    {{ with .Param "feed" }}
        {{/* For this to work, the $icon file should be present in the assets/ directory */}}
        {{- $icon := .icon | default "icon.svg" -}}
        {{- with resources.Get $icon -}}
            <icon>{{ (. | fingerprint).Permalink }}</icon>
        {{- end }}

        {{/* For this to work, the $logo file should be present in the assets/ directory */}}
        {{- $logo := .logo | default (.logo_square | default "logo.svg") -}}
        {{- with resources.Get $logo -}}
            <logo>{{ (. | fingerprint).Permalink }}</logo>
        {{- end }}

        {{/* For this to work, the $image_name file should be present in the content item directory */}}
        {{- $image_name = .item_image_name | default $image_name -}}

        {{/* For this to work, the $banner_image_name file should be present in the content item directory */}}
        {{- $banner_image_name = .banner_image_name | default $banner_image_name -}}

        {{/* For this to work, the $avatar_image_name file should be present in the author directory */}}
        {{- $avatar_image_name = .avatar_image_name | default $avatar_image_name -}}
    {{ end }}
    {{ if site.Author.name }} <!-- this is a single author map -->
        {{ with site.Author }}
            {{- $author := site.GetPage (printf "/%s/%s" "authors" .name) }}
            <author>
                {{- with $author.Params.name }} <!-- use author name from profile page if found -->
                    <name>{{ . | plainify }}</name>
                {{- else -}}
                    <name>{{ .name | plainify }}</name>
                {{- end -}}
                {{- with .uri }} <!-- explicitly overwrite uri -->
                    <uri>{{ . | safeHTML }}</uri>
                {{- else }}
                    {{ with $author }}
                        {{- with .Params.uri }} <!-- use different author uri from profile page if found -->
                            <uri>{{ . | safeHTML }}</uri>
                        {{- else }} <!-- link to profile page -->
                            <uri>{{ .Permalink }}</uri>
                        {{- end -}}
                    {{- end -}}
                {{- end -}}
                {{- with .email }} <!-- explicitly overwrite email -->
                    <email>{{ . | safeHTML }}</email>
                {{- else }}
                    {{ with $author }}
                        {{- with .Params.email }} <!-- use different author email from profile page if found -->
                            <email>{{ . | safeHTML }}</email>
                        {{- end -}}
                    {{- end -}}
                {{- end -}}
            </author>
        {{- end -}}
    {{ else }} <!-- this is a multi author map -->
        {{ range $elem_index, $elem_val := site.Author }}
            {{- $name := .name | default $elem_index }}
            {{- $author := site.GetPage (printf "/%s/%s" "authors" $name) }}
            <author>
                {{- with $author.Params.name }} <!-- use author name from profile page if found -->
                    <name>{{ . | plainify }}</name>
                {{- else -}}
                    <name>{{ $name | plainify }}</name>
                {{- end -}}
                {{- with .uri }} <!-- explicitly overwrite uri -->
                    <uri>{{ . | safeHTML }}</uri>
                {{- else }}
                    {{ with $author }}
                        {{- with .Params.uri }} <!-- use different author uri from profile page if found -->
                            <uri>{{ . | safeHTML }}</uri>
                        {{- else }} <!-- link to profile page -->
                            <uri>{{ .Permalink }}</uri>
                        {{- end -}}
                    {{- end -}}
                {{- end -}}
                {{- with .email }} <!-- explicitly overwrite email -->
                    <email>{{ . | safeHTML }}</email>
                {{- else }}
                    {{ with $author }}
                        {{- with .Params.email }} <!-- use different author email from profile page if found -->
                            <email>{{ . | safeHTML }}</email>
                        {{- end -}}
                    {{- end -}}
                {{- end -}}
            </author>
        {{ end }}
    {{ end }}
    {{ $contributors := "" }}
    {{ with site.Params.contributor }}
        {{ $contributors = . }}
    {{ else }}
        {{ with site.Params.contributors }}
            {{ $contributors = . }}
        {{ end }}
    {{ end }}
    {{ if and $contributors (reflect.IsSlice $contributors) }} <!-- if contributors are defined as slice -->
        {{ range $contributors }}
            {{- $contributor := site.GetPage (printf "/%s/%s" "authors" .) }}
            <contributor>
                {{- with $contributor.Params.name }} <!-- use contributor name from profile page if found -->
                    <name>{{ . | plainify }}</name>
                {{- else -}}
                    <name>{{ . | plainify }}</name>
                {{- end -}}
                {{ with $contributor }}
                    {{- with .Params.uri }} <!-- use different contributor uri from profile page if found -->
                        <uri>{{ . | safeHTML }}</uri>
                    {{- else }} <!-- link to profile page -->
                        <uri>{{ .Permalink }}</uri>
                    {{- end -}}
                    {{- with .Params.email }} <!-- use different contributor email from profile page if found -->
                        <email>{{ . | safeHTML }}</email>
                    {{- end -}}
                {{- end -}}
            </contributor>
        {{ end }}
    {{ else if and $contributors (reflect.IsMap $contributors) }} <!-- if contributors are defined as map -->
        {{ if $contributors.name }} <!-- this is a single contributor map -->
            {{ with $contributors }}
                {{- $contributor := site.GetPage (printf "/%s/%s" "authors" .name) }}
                <contributor>
                    {{- with $contributor.Params.name }} <!-- use contributor name from profile page if found -->
                        <name>{{ . | plainify }}</name>
                    {{- else -}}
                        <name>{{ .name | plainify }}</name>
                    {{- end -}}
                    {{- with .uri }} <!-- explicitly overwrite uri -->
                        <uri>{{ . | safeHTML }}</uri>
                    {{- else }}
                        {{ with $contributor }}
                            {{- with .Params.uri }} <!-- use different contributor uri from profile page if found -->
                                <uri>{{ . | safeHTML }}</uri>
                            {{- else }} <!-- link to profile page -->
                                <uri>{{ .Permalink }}</uri>
                            {{- end -}}
                        {{- end -}}
                    {{- end -}}
                    {{- with .email }} <!-- explicitly overwrite email -->
                        <email>{{ . | safeHTML }}</email>
                    {{- else }}
                        {{ with $contributor }}
                            {{- with .Params.email }} <!-- use different contributor email from profile page if found -->
                                <email>{{ . | safeHTML }}</email>
                            {{- end -}}
                        {{- end -}}
                    {{- end -}}
                </contributor>
            {{ end }}
        {{ else }} <!-- this is a multi contributor map -->
            {{ range $elem_index, $elem_val := $contributors }}
                {{- $name := .name | default $elem_index }}
                {{- $contributor := site.GetPage (printf "/%s/%s" "authors" $name) }}
                <contributor>
                    {{- with $contributor.Params.name }} <!-- use contributor name from profile page if found -->
                        <name>{{ . | plainify }}</name>
                    {{- else -}}
                        <name>{{ $name | plainify }}</name>
                    {{- end -}}
                    {{- with .uri }} <!-- explicitly overwrite uri -->
                        <uri>{{ . | safeHTML }}</uri>
                    {{- else }}
                        {{ with $contributor }}
                            {{- with .Params.uri }} <!-- use different contributor uri from profile page if found -->
                                <uri>{{ . | safeHTML }}</uri>
                            {{- else }} <!-- link to profile page -->
                                <uri>{{ .Permalink }}</uri>
                            {{- end -}}
                        {{- end -}}
                    {{- end -}}
                    {{- with .email }} <!-- explicitly overwrite email -->
                        <email>{{ . | safeHTML }}</email>
                    {{- else }}
                        {{ with $contributor }}
                            {{- with .Params.email }} <!-- use different contributor email from profile page if found -->
                                <email>{{ . | safeHTML }}</email>
                            {{- end -}}
                        {{- end -}}
                    {{- end -}}
                </contributor>
            {{ end }}
        {{ end }}
    {{ else if $contributors }} <!-- simple contributor name -->
        <contributor><name>{{ $contributors | plainify }}</name></contributor>
    {{ end }}
    {{ with site.Params.id }}
        <id>{{ . | plainify }}</id>
    {{ else }}
        <id>{{ .Permalink }}</id>
    {{ end }}
    {{- $limit := (cond (le site.Config.Services.RSS.Limit 0) 65536 site.Config.Services.RSS.Limit) }}
    {{- $feed_sections := site.Params.feedSections | default site.Params.mainSections -}}
    {{/* Range through only the pages with a Type in $feed_sections. */}}
    {{- $pages := where .Pages "Type" "in" $feed_sections -}}
    {{/* Remove the pages that have the disable_feed parameter set to true. */}}
    {{- $pages = where $pages ".Params.disable_feed" "!=" true -}}
    {{- range first $limit $pages }}
        {{ $page := . }}
        <entry>
            {{ printf `<title type="html"><![CDATA[%s]]></title>` .Title | safeHTML }}
            <link href="{{ .Permalink }}?utm_source=atom_feed&utm_medium=item_link" rel="alternate" type="text/html" />
            {{- range .Translations }}
                {{- $link := printf "%s?utm_source=atom_feed&utm_medium=item_link_translation" .Permalink | safeHTML }}
                {{- printf `<link href=%q rel="alternate" type="text/html" hreflang=%q />` $link .Lang | safeHTML }}
            {{- end }}
            {{/* rel=related: See https://validator.w3.org/feed/docs/atom.html#link */}}
            {{- range first 5 (site.RegularPages.Related .) }}
                <link href="{{ .Permalink }}?utm_source=atom_feed&utm_medium=item_related" rel="related" type="text/html" title="{{ .Title }}" />
            {{- end }}
            {{ with .Params.Id }}
                <id>{{ . | plainify }}</id>
            {{ else }}
                {{ with .Param "feed" }}
                    {{ if eq .item_id "uuid" }}
                        {{ $uuid := (substr $page.File.UniqueID 0 8) }}
                        {{ $uuid = printf `%s-%s` $uuid (substr $page.File.UniqueID 8 4) }}
                        {{ $uuid = printf `%s-%s` $uuid (substr $page.File.UniqueID 12 4) }}
                        {{ $uuid = printf `%s-%s` $uuid (substr $page.File.UniqueID 16 4) }}
                        {{ $uuid = printf `%s-%s` $uuid (substr $page.File.UniqueID 20 12) }}
                        <id>urn:uuid:{{ $uuid }}</id>
                    {{ else }}
                        <id>{{ $page.Permalink }}</id>
                    {{ end }}
                {{ end }}
            {{ end }}
            {{ $authors := "" }}
            {{ with .Params.author }}
                {{ $authors = . }}
            {{ else }}
                {{ with .Params.authors }}
                    {{ $authors = . }}
                {{ end }}
            {{ end }}
            {{ if and $authors (reflect.IsSlice $authors) }} <!-- if authors are defined as slice -->
                {{ range $authors }}
                    {{- $author := site.GetPage (printf "/%s/%s" "authors" .) }}
                    <author>
                        {{- with $author.Params.name }} <!-- use author name from profile page if found -->
                            <name>{{ . | plainify }}</name>
                        {{- else -}}
                            <name>{{ . | plainify }}</name>
                        {{- end -}}
                        {{ with $author }}
                            {{- with .Params.uri }} <!-- use different author uri from profile page if found -->
                                <uri>{{ . | safeHTML }}</uri>
                            {{- else }} <!-- link to profile page -->
                                <uri>{{ .Permalink }}</uri>
                            {{- end -}}
                            {{- with .Params.email }} <!-- use different author email from profile page if found -->
                                <email>{{ . | safeHTML }}</email>
                            {{- end -}}
                        {{- end -}}
                    </author>
                {{ end }}
            {{ else if and $authors (reflect.IsMap $authors) }} <!-- if authors are defined as map -->
                {{ if $authors.name }} <!-- this is a single author map -->
                    {{ with $authors }}
                        {{- $author := site.GetPage (printf "/%s/%s" "authors" .name) }}
                        <author>
                            {{- with $author.Params.name }} <!-- use author name from profile page if found -->
                                <name>{{ . | plainify }}</name>
                            {{- else -}}
                                <name>{{ .name | plainify }}</name>
                            {{- end -}}
                            {{- with .uri }} <!-- explicitly overwrite uri -->
                                <uri>{{ . | safeHTML }}</uri>
                            {{- else }}
                                {{ with $author }}
                                    {{- with .Params.uri }} <!-- use different author uri from profile page if found -->
                                        <uri>{{ . | safeHTML }}</uri>
                                    {{- else }} <!-- link to profile page -->
                                        <uri>{{ .Permalink }}</uri>
                                    {{- end -}}
                                {{- end -}}
                            {{- end -}}
                            {{- with .email }} <!-- explicitly overwrite email -->
                                <email>{{ . | safeHTML }}</email>
                            {{- else }}
                                {{ with $author }}
                                    {{- with .Params.email }} <!-- use different author email from profile page if found -->
                                        <email>{{ . | safeHTML }}</email>
                                    {{- end -}}
                                {{- end -}}
                            {{- end -}}
                        </author>
                    {{ end }}
                {{ else }} <!-- this is a multi author map -->
                    {{ range $elem_index, $elem_val := $authors }}
                        {{- $name := .name | default $elem_index }}
                        {{- $author := site.GetPage (printf "/%s/%s" "authors" $name) }}
                        <author>
                            {{- with $author.Params.name }} <!-- use author name from profile page if found -->
                                <name>{{ . | plainify }}</name>
                            {{- else -}}
                                <name>{{ $name | plainify }}</name>
                            {{- end -}}
                            {{- with .uri }} <!-- explicitly overwrite uri -->
                                <uri>{{ . | safeHTML }}</uri>
                            {{- else }}
                                {{ with $author }}
                                    {{- with .Params.uri }} <!-- use different author uri from profile page if found -->
                                        <uri>{{ . | safeHTML }}</uri>
                                    {{- else }} <!-- link to profile page -->
                                        <uri>{{ .Permalink }}</uri>
                                    {{- end -}}
                                {{- end -}}
                            {{- end -}}
                            {{- with .email }} <!-- explicitly overwrite email -->
                                <email>{{ . | safeHTML }}</email>
                            {{- else }}
                                {{ with $author }}
                                    {{- with .Params.email }} <!-- use different author email from profile page if found -->
                                        <email>{{ . | safeHTML }}</email>
                                    {{- end -}}
                                {{- end -}}
                            {{- end -}}
                        </author>
                    {{ end }}
                {{ end }}
            {{ else if $authors }} <!-- simple author name -->
                <author><name>{{ $authors | plainify }}</name></author>
            {{ end }}
            {{ $contributors := "" }}
            {{ with .Params.contributor }}
                {{ $contributors = . }}
            {{ else }}
                {{ with .Params.contributors }}
                    {{ $contributors = . }}
                {{ end }}
            {{ end }}
            {{ if and $contributors (reflect.IsSlice $contributors) }} <!-- if contributors are defined as slice -->
                {{ range $contributors }}
                    {{- $contributor := site.GetPage (printf "/%s/%s" "authors" .) }}
                    <contributor>
                        {{- with $contributor.Params.name }} <!-- use contributor name from profile page if found -->
                            <name>{{ . | plainify }}</name>
                        {{- else -}}
                            <name>{{ . | plainify }}</name>
                        {{- end -}}
                        {{ with $contributor }}
                            {{- with .Params.uri }} <!-- use different contributor uri from profile page if found -->
                                <uri>{{ . | safeHTML }}</uri>
                            {{- else }} <!-- link to profile page -->
                                <uri>{{ .Permalink }}</uri>
                            {{- end -}}
                            {{- with .Params.email }} <!-- use different contributor email from profile page if found -->
                                <email>{{ . | safeHTML }}</email>
                            {{- end -}}
                        {{- end -}}
                    </contributor>
                {{ end }}
            {{ else if and $contributors (reflect.IsMap $contributors) }} <!-- if contributors are defined as map -->
                {{ if $contributors.name }} <!-- this is a single contributor map -->
                    {{ with $contributors }}
                        {{- $contributor := site.GetPage (printf "/%s/%s" "authors" .name) }}
                        <contributor>
                            {{- with $contributor.Params.name }} <!-- use contributor name from profile page if found -->
                                <name>{{ . | plainify }}</name>
                            {{- else -}}
                                <name>{{ .name | plainify }}</name>
                            {{- end -}}
                            {{- with .uri }} <!-- explicitly overwrite uri -->
                                <uri>{{ . | safeHTML }}</uri>
                            {{- else }}
                                {{ with $contributor }}
                                    {{- with .Params.uri }} <!-- use different contributor uri from profile page if found -->
                                        <uri>{{ . | safeHTML }}</uri>
                                    {{- else }} <!-- link to profile page -->
                                        <uri>{{ .Permalink }}</uri>
                                    {{- end -}}
                                {{- end -}}
                            {{- end -}}
                            {{- with .email }} <!-- explicitly overwrite email -->
                                <email>{{ . | safeHTML }}</email>
                            {{- else }}
                                {{ with $contributor }}
                                    {{- with .Params.email }} <!-- use different contributor email from profile page if found -->
                                        <email>{{ . | safeHTML }}</email>
                                    {{- end -}}
                                {{- end -}}
                            {{- end -}}
                        </contributor>
                    {{ end }}
                {{ else }} <!-- this is a multi contributor map -->
                    {{ range $elem_index, $elem_val := $contributors }}
                        {{- $name := .name | default $elem_index }}
                        {{- $contributor := site.GetPage (printf "/%s/%s" "authors" $name) }}
                        <contributor>
                            {{- with $contributor.Params.name }} <!-- use contributor name from profile page if found -->
                                <name>{{ . | plainify }}</name>
                            {{- else -}}
                                <name>{{ $name | plainify }}</name>
                            {{- end -}}
                            {{- with .uri }} <!-- explicitly overwrite uri -->
                                <uri>{{ . | safeHTML }}</uri>
                            {{- else }}
                                {{ with $contributor }}
                                    {{- with .Params.uri }} <!-- use different contributor uri from profile page if found -->
                                        <uri>{{ . | safeHTML }}</uri>
                                    {{- else }} <!-- link to profile page -->
                                        <uri>{{ .Permalink }}</uri>
                                    {{- end -}}
                                {{- end -}}
                            {{- end -}}
                            {{- with .email }} <!-- explicitly overwrite email -->
                                <email>{{ . | safeHTML }}</email>
                            {{- else }}
                                {{ with $contributor }}
                                    {{- with .Params.email }} <!-- use different contributor email from profile page if found -->
                                        <email>{{ . | safeHTML }}</email>
                                    {{- end -}}
                                {{- end -}}
                            {{- end -}}
                        </contributor>
                    {{ end }}
                {{ end }}
            {{ else if $contributors }} <!-- simple contributor name -->
                <contributor><name>{{ $contributors | plainify }}</name></contributor>
            {{ end }}
            <published>{{ .Date.Format "2006-01-02T15:04:05-07:00" | safeHTML }}</published>
            <updated>{{ .Lastmod.Format "2006-01-02T15:04:05-07:00" | safeHTML }}</updated>
            {{- $description := "" -}}
            {{- with .Description -}}
                {{- $description = . -}}
            {{- else -}}
                {{- with .Summary -}}
                    {{- $description = . -}}
                {{- end -}}
            {{- end -}}
            {{- $description = (cond (eq "" $description) "" ($description | markdownify | emojify)) -}}
            {{- $content := .Content -}}
            {{- $image := ($page.Resources.ByType "image").GetMatch $image_name -}}
            {{- with $image -}}
                {{- $img := printf `<div class="feat-image"><img src=%q /></div>` .Permalink | safeHTML }}
                {{ if ne "" $content }}
                    {{ $content = printf `%s%s` $img $content }}
                {{ else if ne "" $description }}
                    {{ $description = printf `%s%s` $img $description }}
                {{ end }}
            {{- end -}}
            {{- $subtitle := "" -}}
            {{- with .Params.subtitle -}}
                {{ $subtitle = . -}}
                {{ $content = printf `<h2>%s</h2>%s` $subtitle $content | safeHTML -}}
            {{- end -}}
            {{- $description = (cond (eq "" $description) "" ($description | markdownify | emojify)) -}}
            {{- $continue := i18n "feed_item_summary_readmore" | default "Read&nbsp;more&nbsp;&#8230;" -}}
            {{- $link := printf `%s?utm_source=atom_feed&utm_medium=item_readmore` .Permalink | safeHTML -}}
            {{- $continue = printf `<p><a href=%q class="more-link">%s</a></p>` $link $continue | safeHTML -}}
            {{ with .Params.disable_feed_content }}
                {{ if ne "" $description }}
                    {{ if ne "" $subtitle }}
                        {{- $description = printf `<h2>%s</h2>%s` $subtitle $description | safeHTML -}}
                    {{ end }}
                    {{ printf `<summary><![CDATA[%s<p>&nbsp;</p>%s]]></summary>` $description $continue | safeHTML -}}
                {{ else }}
                    {{ if ne "" $subtitle }}
                        {{ printf `<summary><![CDATA[<p>%s</p><p>&nbsp;</p>%s]]></summary>` $subtitle $continue | safeHTML }}
                    {{ else }}
                        {{ printf `<summary><![CDATA[%s]]></summary>` $continue | safeHTML }}
                    {{ end }}
                {{ end }}
            {{ else }}
                {{ if eq "" $description }}
                    {{ if ne "" $content }}
                        {{ printf `<content><![CDATA[%s]]></content>` $content | safeHTML }}
                    {{ else }}
                        {{ if ne "" $subtitle }}
                            {{ printf `<summary><![CDATA[<p>%s</p><p>&nbsp;</p>%s]]></summary>` $subtitle $continue | safeHTML }}
                        {{ else }}
                            {{ printf `<summary><![CDATA[%s]]></summary>` $continue | safeHTML }}
                        {{ end }}
                    {{ end }}
                {{ else if eq "" $content }}
                    {{ if ne "" $subtitle }}
                        {{- $description = printf `<h2>%s</h2>%s` $subtitle $description | safeHTML -}}
                    {{ end }}
                    {{ printf `<summary><![CDATA[%s<p>&nbsp;</p>%s]]></summary>` $description $continue | safeHTML -}}
                {{ else }}
                    {{ printf `<summary><![CDATA[%s]]></summary>` $description | safeHTML }}
                    {{ printf `<content><![CDATA[%s]]></content>` $content | safeHTML }}
                {{ end }}
            {{ end }}
            {{ with site.Taxonomies }}
                {{ range $taxo,$_ := . }} <!-- Defaults taxos: "tags", "categories" -->
                    {{ with $page.Param $taxo }}
                        {{ $taxo_list := . }} <!-- $taxo_list will be the tags/categories list -->
                        {{ with site.GetPage (printf "/%s" $taxo) }}
                            {{ $taxonomy_page := . }}
                            {{ range $taxo_list }} <!-- Below, assuming pretty URLs -->
                                <category scheme="taxonomy:{{ printf "%s" $taxo | humanize }}" term="{{ (. | urlize) }}" label="{{ . }}" />
                            {{ end }}
                        {{ end }}
                    {{ end }}
                {{ end }}
            {{ end }}
        </entry>
    {{ end }}
</feed>
